import 'package:flutter/material.dart';
import 'package:google_maps_flutter/google_maps_flutter.dart';
import 'package:mqtt_client/mqtt_client.dart';
import 'package:mqtt_client/mqtt_server_client.dart';

// final client = MqttServerClient("192.168.43.16", "sci_app");

void main() => runApp(const MyApp());

class MyApp extends StatefulWidget {
  const MyApp({Key? key}) : super(key: key);

  @override
  _MyAppState createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  Future<MqttServerClient> connect() async {
    MqttServerClient client = MqttServerClient.withPort('192.168.43.16', 'sci_app', 1883);
    client.logging(on: true);
    client.onConnected = onConnected;
    client.onDisconnected = onDisconnected;
    // client.onUnsubscribed = onUnsubscribed;
    client.onSubscribed = onSubscribed;
    client.onSubscribeFail = onSubscribeFail;
    client.pongCallback = pong;

    final connMessage = MqttConnectMessage()
    // .authenticateAs('username', 'password')
        .withWillTopic('willtopic')
        .withWillMessage('Will message')
        .startClean()
        .withWillQos(MqttQos.atLeastOnce);

    client.connectionMessage = connMessage;
    try {
      await client.connect();
      client.subscribe("location", MqttQos.atLeastOnce);
    } catch (e) {
      print('Noooo!!!! $e');
      client.disconnect();
    }

    client.updates!.listen((List<MqttReceivedMessage<MqttMessage?>>? c) {
      final recMess = c![0].payload as MqttPublishMessage;
      final pt = MqttPublishPayload.bytesToStringAsString(recMess.payload.message!);
      print('EXAMPLE::Change notification:: topic is <${c[0].topic}>, payload is <-- $pt -->');
      print('');
    });

    return client;
  }

  // connection succeeded
  void onConnected() { print('++++++ Connected'); }

  // unconnected
  void onDisconnected() { print('Disconnected'); }

  // subscribe to topic succeeded
  void onSubscribed(String topic) { print('++++++ Subscribed topic: $topic'); }

  // subscribe to topic failed
  void onSubscribeFail(String topic) { print('Failed to subscribe $topic'); }

  // PING response received
  void pong() { print('Ping response client callback invoked'); }

  late GoogleMapController mapController;

  final LatLng _center = const LatLng(13.521563, -12.677433);

  void _onMapCreated(GoogleMapController controller) {
    mapController = controller;
  }

  @override
  void initState() {
    super.initState();
    connect();
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: const Text('Projet SCI'),
          backgroundColor: Colors.green[700],
        ),
        // body: GoogleMap(
        //   onMapCreated: _onMapCreated,
        //   initialCameraPosition: CameraPosition(
        //     target: _center,
        //     zoom: 11.0,
        //   ),
        // ),
      ),
    );
  }
}